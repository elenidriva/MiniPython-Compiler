Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 

Tokens
	tab = 9;
	plus = '+';
	minus = '-';
	mult = '*';
	exp = '**';
	div = '/';
	mod = '%';
	plus_eq = '+=';
	minus_eq = '-=';
	mult_eq = '*=';
	div_eq = '/=';	
	plus_plus = '++';
	minus_minus = '--';
	equal = '=';
	logic_equal = '==';
	not_equal = '!=';
	exclam = '!';
	less = '<';
	greater = '>';
	less_eq = '<=';
	greater_eq = '>=';
	true = 'true';
	false = 'false';
	and = 'and';
	or = 'or';
	not = 'not';
	dictt = 'dict';
	def = 'def';
	logic_plus = '&&';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma = ',';
	qmark = '?';
	gqmark = ';';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	in = 'in';
	print = 'print';
	return = 'return';
	assert = 'assert';
	semi = ':';
	dot = '.';
	none = 'None';
	quote = '"';
	blank = (' ' | lf | cr);
	line_comment = '#' not_eol* eol; 
	number = ('-')? digit+ | ('-')? (digit+ '.' digit+);
	id = letter (letter | digit)*;
	string = '"'not_eol* '"' | '''not_eol* ''';

Ignored Tokens
	blank, line_comment;
	
Productions
	programme = commands*;
	
	commands =	 {stat} statement|
				 {func} function;

	function =  def id l_par argument? r_par semi statement;
	
	equal_value = equal value;
	
	comma_id_equal_value = comma id equal_value?;
	
	argument =	id equal_value? comma_id_equal_value*;
	
	statement =	 {if} tab* if  comparison semi statement |
				 {for} tab* for [id1] :id in [id2] :id semi statement |
				 {while} tab* while comparison semi statement |
				 {assign} tab* id equal expression |
				 {plus_eq} tab* id plus_eq expression |
				 {minus_eq} tab* id minus_eq expression |
				 {mult_eq} tab* id mult_eq expression |
				 {div_eq} tab* id div_eq expression |
				 {print} tab* print expression comma_expression* |
				 {function_call1} tab* function_call |
				 {return} tab* return expression |
				 {list_assign} tab* id l_br [list1]: expression r_br equal [list2]: expression |
				 {assert} assert expression comma_expression?;
				 			 
	value = 	{number} number |
				{string} string |
				{function_call2} id dot function_call |
				{none} none;
			
	comma_value = comma value;
	
	comma_expression = comma expression;
	
	function_call = id l_par arg_list? r_par;
	
	arg_list = expression comma_expression*;
	

	expression = 	{multi} multiplication |
					{addition} expression plus multiplication|
					{subtraction} expression minus multiplication |
					{incr_decr} increment_decrement;
									
					
	multiplication = 	  {pow} power |
						  {mult} multiplication mult power |
						  {div} multiplication div power |
						  {remainder} multiplication mod power;
						  
	power = 			{smth} something |
						{power} power exp something;
	
	increment_decrement = {pre_increment} plus_plus pre_post_operand |
						  {pre_decrement} minus_minus pre_post_operand |
						  {postfix} postfix;
	
	postfix = {post_increment} pre_post_operand plus_plus |
			  {post_decrement} pre_post_operand minus_minus;
			  
	pre_post_operand = 	{smthhh} something;	
	
	comparison =	{lessc} [lpar1]:expression less [rpar1]:expression |
					{greatc}[lpar2]:expression greater [rpar2]:expression |
				    {equals} [eq1]:expression logic_equal [eq2]:expression |
					{not_equal} [n_eq1]:expression not_equal [n_eq2]:expression |
					{less_eq} [l_eq1]:expression less_eq [l_eq2]:expression |
					{greater_eq} [gr_eq1]:expression greater_eq [gr_eq2]:expression |
					{and_or_not} and_or_not;
					 
	and_or_not = 	{and_not_or_value} rel_val |
					{and} and_or_not and rel_val | 
					{or} and_or_not or rel_val | 
					{not} not rel_val;
	
	rel_val = 		{smth} par_comp |
					{true} true |
					{false} false;
					 					
	par_comp = {par_comp} l_par comparison r_par;	
		
	something =	   {identifier_br} id l_br expression r_br |
				   {identifier} id |
				   {val} value|
				   {par} l_par expression r_par |
				   {brack} l_br value comma_value* r_br |
				   {function_call2} function_call;
				   
